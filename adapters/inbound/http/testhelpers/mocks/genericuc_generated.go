// Code generated by MockGen. DO NOT EDIT.
// Source: ../../genericuc.go
//
// Generated by this command:
//
//	mockgen -source=../../genericuc.go -package=mocks -destination=./genericuc_generated.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGenericUseCase is a mock of GenericUseCase interface.
type MockGenericUseCase[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockGenericUseCaseMockRecorder[T]
	isgomock struct{}
}

// MockGenericUseCaseMockRecorder is the mock recorder for MockGenericUseCase.
type MockGenericUseCaseMockRecorder[T any] struct {
	mock *MockGenericUseCase[T]
}

// NewMockGenericUseCase creates a new mock instance.
func NewMockGenericUseCase[T any](ctrl *gomock.Controller) *MockGenericUseCase[T] {
	mock := &MockGenericUseCase[T]{ctrl: ctrl}
	mock.recorder = &MockGenericUseCaseMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericUseCase[T]) EXPECT() *MockGenericUseCaseMockRecorder[T] {
	return m.recorder
}

// Create mocks base method.
func (m *MockGenericUseCase[T]) Create(entity T) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGenericUseCaseMockRecorder[T]) Create(entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGenericUseCase[T])(nil).Create), entity)
}

// Delete mocks base method.
func (m *MockGenericUseCase[T]) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGenericUseCaseMockRecorder[T]) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGenericUseCase[T])(nil).Delete), id)
}

// GetByID mocks base method.
func (m *MockGenericUseCase[T]) GetByID(id string) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockGenericUseCaseMockRecorder[T]) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockGenericUseCase[T])(nil).GetByID), id)
}

// List mocks base method.
func (m *MockGenericUseCase[T]) List() ([]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGenericUseCaseMockRecorder[T]) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGenericUseCase[T])(nil).List))
}

// Update mocks base method.
func (m *MockGenericUseCase[T]) Update(entity T) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGenericUseCaseMockRecorder[T]) Update(entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGenericUseCase[T])(nil).Update), entity)
}
